apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: app-backend
  labels:
    type: backend
    # type: backend-db-aws
    # location: local
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: App
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
  resources:

#########################################################################
# ProviderConfigs
#########################################################################

  # Kubernetes
  - name: kubernetes
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      spec:
        credentials:
          source: InjectedIdentity
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    readinessChecks:
    - type: None

#########################################################################
# Kubernetes objects
#########################################################################

  # Deployment
  - name: deployment
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: apps/v1
            kind: Deployment
            spec:
              template:
                spec:
                  containers:
                  - name: backend
                    ports:
                    - containerPort: 3000
                    livenessProbe:
                      httpGet:
                        path: /
                        port: 3000
                    readinessProbe:
                      httpGet:
                        path: /
                        port: 3000
                    resources:
                      limits:
                        cpu: 250m
                        memory: 256Mi
                      requests:
                        cpu: 125m
                        memory: 128Mi
                    env:
                    - name: DB_HOST
                      valueFrom:
                        secretKeyRef:
                          key: endpoint
                    - name: DB_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          key: password
                    - name: DB_PORT
                      valueFrom:
                        secretKeyRef:
                          key: port
                          optional: true
                    - name: DB_USERNAME
                      valueFrom:
                        secretKeyRef:
                          key: username
                    - name: DB_NAME
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-deployment"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
    - fromFieldPath: spec.parameters.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.labels.app
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.selector.matchLabels.app
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.template.metadata.labels.app
    - fromFieldPath: spec.parameters.image
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].image
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].ports[0].containerPort
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].livenessProbe.httpGet.port
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].readinessProbe.httpGet.port
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[0].valueFrom.secretKeyRef.name
      # transforms:
      # - type: string
      #   string:
      #     fmt: "%s-db"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[1].valueFrom.secretKeyRef.name
      # transforms:
      # - type: string
      #   string:
      #     fmt: "%s-db"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[2].valueFrom.secretKeyRef.name
      # transforms:
      # - type: string
      #   string:
      #     fmt: "%s-db"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[3].valueFrom.secretKeyRef.name
      # transforms:
      # - type: string
      #   string:
      #     fmt: "%s-db"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[4].value
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    readinessChecks:
    - type: None


  # Service
  - name: service
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Service
            spec:
              type: ClusterIP
              ports:
              - port: 3000
                targetPort: 3000
                protocol: TCP
                name: http
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-service"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
    - fromFieldPath: spec.parameters.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.labels.app
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.selector.app
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.ports[0].port
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.ports[0].targetPort
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    readinessChecks:
    - type: None

  # HorizontalPodAutoscaler
  - name: hpa
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: autoscaling/v1
            kind: HorizontalPodAutoscaler
            spec:
              minReplicas: 1
              maxReplicas: 6
              scaleTargetRef:
                apiVersion: apps/v1
                kind: Deployment
              targetCPUUtilizationPercentage: 80
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-hpa"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
    - fromFieldPath: spec.parameters.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.labels.app
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.scaleTargetRef.name
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    readinessChecks:
      - type: None

#########################################################################
# SQL
#########################################################################
  # - name: sql
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: devopstoolkitseries.com/v1alpha1
  #           kind: SQLClaim
  #           # spec:
  #           #   compositionSelector:
  #           #     matchLabels:
  #           #       provider: aws
  #           #       db: postgresql
  #           #   parameters:
  #           #     version: "13"
  #           #     size: small
  #           #     databases:
  #           #       - silly-demo-db
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: "%s-sql"
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.manifest.metadata.labels.app
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.manifest.spec.id
  #   - fromFieldPath: spec.parameters.database.cloudProvider
  #     toFieldPath: spec.forProvider.manifest.spec.compositionSelector.matchLabels.provider
  #   - fromFieldPath: spec.parameters.database.dbProvider
  #     toFieldPath: spec.forProvider.manifest.spec.compositionSelector.matchLabels.db
  #   - fromFieldPath: spec.parameters.database.version
  #     toFieldPath: spec.forProvider.manifest.spec.parameters.version
  #   - fromFieldPath: spec.parameters.database.size
  #     toFieldPath: spec.forProvider.manifest.spec.parameters.size
  #   - fromFieldPath: spec.parameters.database.databases
  #     toFieldPath: spec.forProvider.manifest.spec.parameters.databases
  #   # - fromFieldPath: spec.parameters.db.type
  #   #   toFieldPath: spec.forProvider.manifest.spec.parameters.version
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.providerConfigRef.name
  #   - fromFieldPath: spec.parameters.namespace
  #     toFieldPath: spec.forProvider.manifest.metadata.namespace




  # - name: secret
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: v1
  #           kind: Secret
  #           # metadata:
  #           #   name: silly-demo-db-password
  #           data:
  #             password: cG9zdGdyZXM=
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: "%s-secret"
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.manifest.metadata.name
  #   - fromFieldPath: spec.parameters.namespace
  #     toFieldPath: spec.forProvider.manifest.metadata.namespace
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.manifest.metadata.labels.app
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.manifest.spec.selector.app
  #   - fromFieldPath: spec.parameters.port
  #     toFieldPath: spec.forProvider.manifest.spec.ports[0].port
  #   - fromFieldPath: spec.parameters.port
  #     toFieldPath: spec.forProvider.manifest.spec.ports[0].targetPort
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.providerConfigRef.name
  #   readinessChecks:
  #   - type: None













  # - name: sql-secret
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: external-secrets.io/v1beta1
  #           kind: ExternalSecret
  #           spec:
  #             refreshInterval: 5m
  #             secretStoreRef:
  #               kind: ClusterSecretStore
  #               name: aws
  #             target:
  #               creationPolicy: Owner
  #             dataFrom:
  #               - extract:
  #                   key: production-postgresql
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: "%s-password"
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.manifest.spec.target.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: "%s-password"
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.manifest.metadata.name
  #   - fromFieldPath: spec.parameters.namespace
  #     toFieldPath: spec.forProvider.manifest.metadata.namespace
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.manifest.metadata.labels.app
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.providerConfigRef.name